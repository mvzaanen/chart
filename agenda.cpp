////////////////////////////////////////////////////////////////////////////////
// Filename: agenda.cpp
////////////////////////////////////////////////////////////////////////////////
// This file is part of the chart package.
////////////////////////////////////////////////////////////////////////////////
// This file contains the implementation of the Agenda class.
////////////////////////////////////////////////////////////////////////////////

#include "agenda.h"
#include "edge.h"

////////////////////////////////////////////////////////////////////////////////
// Function: add
// If the Edge is not in the Agenda, it is added to the Agenda.
////////////////////////////////////////////////////////////////////////////////
void
Agenda::add(const Edge &edge) {
  if (!isIn(edge)) {
    _edges.push_back(edge);
  }
} // end of function: add


////////////////////////////////////////////////////////////////////////////////
// Function: getNext
// Get the next Edge off the Agenda.  The Edge is removed from the
// Agenda.
////////////////////////////////////////////////////////////////////////////////
Edge
Agenda::getNext() {
  Edge res=_edges.front();
  _edges.pop_front();
  return res;
} // end of function: getNext

////////////////////////////////////////////////////////////////////////////////
// Function: isIn
// Return true if the Edge is in the Agenda, false otherwise.
////////////////////////////////////////////////////////////////////////////////
bool
Agenda::isIn(const Edge &edge) const {
  return _edges.isMember(edge);
} // end of function: isIn


////////////////////////////////////////////////////////////////////////////////
// Function: empty
// Return true if the Agenda is empty, false otherwise.
////////////////////////////////////////////////////////////////////////////////
bool
Agenda::empty() const {
  return _edges.empty();
} // end of function: empty

// end of file: agenda.cpp
