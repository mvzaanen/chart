////////////////////////////////////////////////////////////////////////////////
// Filename: edge.h
////////////////////////////////////////////////////////////////////////////////
// This file is part of the chart package.
////////////////////////////////////////////////////////////////////////////////
// This file contains the definition of the Edge and EdgeList classes.
////////////////////////////////////////////////////////////////////////////////

#ifndef EDGE_H
#define EDGE_H

#include <list>
#include "category.h"
#include "tree.h"


////////////////////////////////////////////////////////////////////////////////
// Class: Edge
// Provides the interface for an Edge.
////////////////////////////////////////////////////////////////////////////////
class Edge {
////////////////////////////////////////////////////////////////////////////////
// Function: combine 
// Returns the Edge that combines both arguments.
////////////////////////////////////////////////////////////////////////////////
  friend Edge
  combine(const Edge &, const Edge &);

public:
////////////////////////////////////////////////////////////////////////////////
// Function: Edge
// Constructor.
////////////////////////////////////////////////////////////////////////////////
  Edge(CategorySequence::size_type start,
      CategorySequence::size_type finish, const Category &label,
      const double logProb)
      :_start(start),_finish(finish), _tree(label), _logProb(logProb) { }

////////////////////////////////////////////////////////////////////////////////
// Function: Edge
// Constructor.
////////////////////////////////////////////////////////////////////////////////
  Edge(CategorySequence::size_type start,
      CategorySequence::size_type finish, const Category &label,
      const CategorySequence& toFind, const double logProb)
      :_start(start), _finish(finish) ,_tree(label), _toFind(toFind),
      _logProb(logProb) { }
   
////////////////////////////////////////////////////////////////////////////////
// Function: Edge
// Constructor.
////////////////////////////////////////////////////////////////////////////////
  Edge(CategorySequence::size_type start,
      CategorySequence::size_type finish, const Tree &tree,
      const CategorySequence& toFind, const double logProb)
      :_start(start), _finish(finish), _tree(tree), _toFind(toFind),
      _logProb(logProb) { }

////////////////////////////////////////////////////////////////////////////////
// Function: Edge
// Copy constructor.
////////////////////////////////////////////////////////////////////////////////
  Edge(const Edge &e):_start(e._start), _finish(e._finish),
      _tree(e._tree), _toFind(e._toFind), _logProb(e._logProb) { }

////////////////////////////////////////////////////////////////////////////////
// Function: operator=
// Assignment operator.
////////////////////////////////////////////////////////////////////////////////
  void
  operator=(const Edge &);

////////////////////////////////////////////////////////////////////////////////
// Function: operator==
// Equality operator.
////////////////////////////////////////////////////////////////////////////////
  bool
  operator==(const Edge &) const;

////////////////////////////////////////////////////////////////////////////////
// Function: canCombineWith 
// Returns true if the two Edges can be combined, false otherwise.
////////////////////////////////////////////////////////////////////////////////
  bool
  canCombineWith(const Edge &) const;

////////////////////////////////////////////////////////////////////////////////
// Function: isActive 
// Returns true if the Edge is active.
////////////////////////////////////////////////////////////////////////////////
  bool
  isActive() const;

////////////////////////////////////////////////////////////////////////////////
// Function: start 
// Returns the start value.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence::size_type
  start() const;

////////////////////////////////////////////////////////////////////////////////
// Function: finish 
// Returns the finish value.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence::size_type
  finish() const;

////////////////////////////////////////////////////////////////////////////////
// Function: label 
// Returns the category of the Edge.
////////////////////////////////////////////////////////////////////////////////
  Category
  label() const;

////////////////////////////////////////////////////////////////////////////////
// Function: found 
// Returns the CategorySequence of the children in the tree.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence
  found() const;

////////////////////////////////////////////////////////////////////////////////
// Function: toFind
// Returns the CategorySequence of the toFind Categories.
////////////////////////////////////////////////////////////////////////////////
  const CategorySequence&
  toFind() const;

////////////////////////////////////////////////////////////////////////////////
// Function: parse
// Returns the parse tree.
////////////////////////////////////////////////////////////////////////////////
  const Tree&
  parse() const;

////////////////////////////////////////////////////////////////////////////////
// Function: logProb
// Returns the log of the probability of the Edge.
////////////////////////////////////////////////////////////////////////////////
  double
  logProb() const;

////////////////////////////////////////////////////////////////////////////////
// Function: print
// Prints the Edge on the ostream.
////////////////////////////////////////////////////////////////////////////////
  void
  print(ostream&) const;

protected:
private:
////////////////////////////////////////////////////////////////////////////////
// Variable: _start
// The start value of the Edge.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence::size_type _start;

/////////////////////////////////////////////////////////////////////////////// 
// Variable: _finish
// The finish value of the Edge.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence::size_type _finish;

/////////////////////////////////////////////////////////////////////////////// 
// Variable: _tree
// The tree associated with the Edge.
////////////////////////////////////////////////////////////////////////////////
  Tree _tree;

/////////////////////////////////////////////////////////////////////////////// 
// Variable: _toFind
// The CategorySequence of the categories that are to be found.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence _toFind;

/////////////////////////////////////////////////////////////////////////////// 
// Variable: _logProb
// The log of the probability of the edge.
////////////////////////////////////////////////////////////////////////////////
  double _logProb;

}; // end of class: Edge


////////////////////////////////////////////////////////////////////////////////
// Function: operator<<
// Output operator for Edge.
////////////////////////////////////////////////////////////////////////////////
ostream&
operator<<(ostream &, const Edge &);



////////////////////////////////////////////////////////////////////////////////
// Class: EdgeList
// Provides the interface for an EdgeList.
////////////////////////////////////////////////////////////////////////////////
class EdgeList:public list<Edge> {
public:

////////////////////////////////////////////////////////////////////////////////
// Function: isMember
// Returns true if the Edge is a member of the list, false otherwise.
////////////////////////////////////////////////////////////////////////////////
  bool
  isMember(const Edge &) const;
protected:
private:
}; // end of class: EdgeList


////////////////////////////////////////////////////////////////////////////////
// Function: operator<<
// Print the EdgeList on the ostream.
////////////////////////////////////////////////////////////////////////////////
ostream&
operator<<(ostream &, const EdgeList &);

#endif
// end of file: edge.h
