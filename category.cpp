////////////////////////////////////////////////////////////////////////////////
// Filename: category.cpp
////////////////////////////////////////////////////////////////////////////////
// This file is part of the chart package.
////////////////////////////////////////////////////////////////////////////////
// This file contains the implementation of the Category and
// CategorySequence classes.
////////////////////////////////////////////////////////////////////////////////

#include "category.h"

////////////////////////////////////////////////////////////////////////////////
// Function: operator const string
// Automatic conversion to a string.
////////////////////////////////////////////////////////////////////////////////
Category::operator const string() const {
  return _s;
} // end of function: operator const string


////////////////////////////////////////////////////////////////////////////////
// Function: operator=
// Assignment operator.
////////////////////////////////////////////////////////////////////////////////
void
Category::operator=(const Category &cat) {
  _s=cat._s;
} // end of function: operator=


////////////////////////////////////////////////////////////////////////////////
// Function: operator==
// Equality operator.
////////////////////////////////////////////////////////////////////////////////
bool
Category::operator==(const Category &cat) const {
  return _s==cat._s;
} // end of function: operator==


////////////////////////////////////////////////////////////////////////////////
// Function: operator!=
// Inequality operator.
////////////////////////////////////////////////////////////////////////////////
bool
Category::operator!=(const Category &cat) const {
  return !(*this==cat);
} // end of function: operator!=


////////////////////////////////////////////////////////////////////////////////
// Function: print
// Print contents on ostream.
////////////////////////////////////////////////////////////////////////////////
void
Category::print(ostream &os) const {
  os << _s;
} // end of function: print


////////////////////////////////////////////////////////////////////////////////
// Function: operator<<
// Output operator for Category.
////////////////////////////////////////////////////////////////////////////////
ostream&
operator<<(ostream &os, const Category &cat) {
  cat.print(os);
  return os;
} // end of function: operator<<


////////////////////////////////////////////////////////////////////////////////
// Function: CategorySequence
// Constructor.
////////////////////////////////////////////////////////////////////////////////
CategorySequence::CategorySequence(const Category &cat)
    :_alive(true) { 
  clear();
  push_back(cat);
} // end of function: CategorySequence


////////////////////////////////////////////////////////////////////////////////
// Function: operator+=
// Addition assignment operator.
////////////////////////////////////////////////////////////////////////////////
CategorySequence&
CategorySequence::operator+=(const Category &cat) {
  push_back(cat);
  return *this;
} // end of function: operator+=


////////////////////////////////////////////////////////////////////////////////
// Function: operator+=
// Addition assignment operator.
////////////////////////////////////////////////////////////////////////////////
CategorySequence&
CategorySequence::operator+=(const CategorySequence &seq) {
  insert(end(), seq.begin(), seq.end());
  return *this;
} // end of function: operator+=


////////////////////////////////////////////////////////////////////////////////
// Function: print
// Print the CategorySequence on the ostream.
////////////////////////////////////////////////////////////////////////////////
void
CategorySequence::print(ostream &os) const {
  bool isFirst=true;
  for (vector<Category>::const_iterator i=begin(); i!=end(); ++i) {
    if (!isFirst) {
      os << " ";
    }
    os << *i;
    isFirst = false;
  }
} // end of function: print


////////////////////////////////////////////////////////////////////////////////
// Function: read
// Read the CategorySequence from the istream.
////////////////////////////////////////////////////////////////////////////////
void
CategorySequence::read(istream &is) {
  clear();
  string catStr;
  while (is.good()) {
    is >> catStr;
    if (is.fail()) {
      break;
    }
    push_back(Category(catStr));
  }
} // end of function: read


////////////////////////////////////////////////////////////////////////////////
// Function: rest
// Return the rest of the sequence (sequence without the front).
////////////////////////////////////////////////////////////////////////////////
CategorySequence
CategorySequence::rest() const {
  return CategorySequence(begin()+1, end());
} // end of function: rest


////////////////////////////////////////////////////////////////////////////////
// Function: operator<<
// Output operator for CategorySequence.
////////////////////////////////////////////////////////////////////////////////
ostream &
operator<<(ostream &os, const CategorySequence &seq) {
  seq.print(os);
  return os;
} // end of function: operator<<


////////////////////////////////////////////////////////////////////////////////
// Function: operator>>
// Input operator for CategorySequence.
////////////////////////////////////////////////////////////////////////////////
istream&
operator>>(istream &is, CategorySequence &seq) {
  seq.read(is);
  return is;
} // end of function: operator>>


////////////////////////////////////////////////////////////////////////////////
// Function: operator+
// Addition operator for CategorySequence and Category.
////////////////////////////////////////////////////////////////////////////////
CategorySequence
operator+(const CategorySequence &a, const Category &b) {
  CategorySequence temp = a;
  return temp+=b;
} // end of function: operator+


////////////////////////////////////////////////////////////////////////////////
// Function: operator+
// Addition operator for CategorySequence and CategorySequence.
////////////////////////////////////////////////////////////////////////////////
CategorySequence
operator+(const CategorySequence &a, const CategorySequence &b) {
  CategorySequence temp = a;
  return temp += b;
} // end of function: operator+


// end of file: category.cpp
