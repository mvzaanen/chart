////////////////////////////////////////////////////////////////////////////////
// Filename: tree.cpp
////////////////////////////////////////////////////////////////////////////////
// This file is part of the chart package.
////////////////////////////////////////////////////////////////////////////////
// This file contains the implementation of the Tree class;
////////////////////////////////////////////////////////////////////////////////

#include <string>
#include "tree.h"

////////////////////////////////////////////////////////////////////////////////
// Function: Tree
// Constructor.
////////////////////////////////////////////////////////////////////////////////
Tree::Tree(const Category& cat)
    :_cat(cat) {
} // end of function: Tree


////////////////////////////////////////////////////////////////////////////////
// Function: Tree
// Copy constructor.
////////////////////////////////////////////////////////////////////////////////
Tree::Tree(const Tree &tree) {
  _cat=tree._cat;
  _children=tree._children;
} // end of function: Tree


////////////////////////////////////////////////////////////////////////////////
// Function: ~Tree
// Destructor.
////////////////////////////////////////////////////////////////////////////////
Tree::~Tree() {
   clear();
} // end of function: ~Tree


////////////////////////////////////////////////////////////////////////////////
// Function: operator=
// Assignment operator.
////////////////////////////////////////////////////////////////////////////////
void
Tree::operator=(const Tree &tree) {
  _children.clear();
  _cat=tree._cat;
  _children=tree._children;
} // end of function: operator=


////////////////////////////////////////////////////////////////////////////////
// Function: operator==
// Equality operator.
////////////////////////////////////////////////////////////////////////////////
bool
Tree::operator==(const Tree &tree) const {
  if (_cat!=tree._cat) {
    return false;
  }
  return _children==tree._children;
} // end of function: operator==


////////////////////////////////////////////////////////////////////////////////
// Function: operator!=
// Inequality operator.
////////////////////////////////////////////////////////////////////////////////
bool 
Tree::operator!=(const Tree &tree) const {
  return !(*this == tree);
} // end of function: operator!=


////////////////////////////////////////////////////////////////////////////////
// Function: cat
// Return the category of the top node.
////////////////////////////////////////////////////////////////////////////////
const Category&
Tree::cat() const {
  return _cat;
} // end of function: cat


////////////////////////////////////////////////////////////////////////////////
// Function: clear
// Empty the tree.
////////////////////////////////////////////////////////////////////////////////
void
Tree::clear() {
  _children.clear();
} // end of function: clear


////////////////////////////////////////////////////////////////////////////////
// Function: addChild
// Add a child to the current level.
////////////////////////////////////////////////////////////////////////////////
void
Tree::addChild(const Tree & tree) {
  _children.push_back(tree);
} // end of function: addChild


////////////////////////////////////////////////////////////////////////////////
// Function: getChildren
// Return the children of the current level.
////////////////////////////////////////////////////////////////////////////////
CategorySequence
Tree::getChildren() const {
  CategorySequence CS;
  for (vector<Tree>::const_iterator i=_children.begin();
      i!=_children.end(); ++i) {
    CS+=i->cat();
  }
  return CS;
} // end of function: getChildren


////////////////////////////////////////////////////////////////////////////////
// Function: print
// Print contents on ostream.
////////////////////////////////////////////////////////////////////////////////
void
Tree::print(ostream &os) const {
  if (_children.size()>0) {
    os << "(";
  }
  os << _cat;
  for (vector<Tree>::const_iterator i=_children.begin();
      i!=_children.end(); ++i) {
    os <<  " " << *i;
  }
  if (_children.size()>0) {
    os << ")";
  }
} // end of function: print


////////////////////////////////////////////////////////////////////////////////
// Function: operator<<
// Output operator for Tree.
////////////////////////////////////////////////////////////////////////////////
ostream&
operator<<(ostream &os, const Tree &tree) {
  tree.print(os);
  return os;
} // end of function: operator<<

// end of file: tree.cpp
