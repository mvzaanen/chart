////////////////////////////////////////////////////////////////////////////////
// Filename: category.h
////////////////////////////////////////////////////////////////////////////////
// This file is part of the chart package.
////////////////////////////////////////////////////////////////////////////////
// This file contains the definition of the Category and
// CategorySequence classes.
////////////////////////////////////////////////////////////////////////////////

#ifndef CATEGORY_H
#define CATEGORY_H

#include <iostream>
#include <vector>
#include <string>

using namespace std;

////////////////////////////////////////////////////////////////////////////////
// Class: Category
// Provides the interface for a Category.
////////////////////////////////////////////////////////////////////////////////
class Category {
public:
////////////////////////////////////////////////////////////////////////////////
// Function: Category
// Constructor.
////////////////////////////////////////////////////////////////////////////////
  Category():_alive(true) { }

////////////////////////////////////////////////////////////////////////////////
// Function: Category
// Copy constructor.
////////////////////////////////////////////////////////////////////////////////
  Category(const Category &cat):_alive(true),_s(cat._s) { }

////////////////////////////////////////////////////////////////////////////////
// Function: Category
// Constructor from a string.
////////////////////////////////////////////////////////////////////////////////
  Category(const string str):_alive(true),_s(str) { }

////////////////////////////////////////////////////////////////////////////////
// Function: operator const string()
// Automatic conversion to a string.
////////////////////////////////////////////////////////////////////////////////
  operator const string() const;

////////////////////////////////////////////////////////////////////////////////
// Function: operator=
// Assignment operator.
////////////////////////////////////////////////////////////////////////////////
  void
  operator=(const Category &);

////////////////////////////////////////////////////////////////////////////////
// Function: operator==
// Equality operator.
////////////////////////////////////////////////////////////////////////////////
  bool
  operator==(const Category &) const;

////////////////////////////////////////////////////////////////////////////////
// Function: operator!=
// Inequality operator.
////////////////////////////////////////////////////////////////////////////////
  bool
  operator!=(const Category &cat) const;

////////////////////////////////////////////////////////////////////////////////
// Function: print
// Print contents on ostream.
////////////////////////////////////////////////////////////////////////////////
  void
  print(ostream &) const;

protected:
private:
////////////////////////////////////////////////////////////////////////////////
// Variable: _alive
// True if the Category is still alive, false otherwise.
////////////////////////////////////////////////////////////////////////////////
   bool _alive;

////////////////////////////////////////////////////////////////////////////////
// Variable: _s
// Contents of the Category.
////////////////////////////////////////////////////////////////////////////////
   string _s;
}; // end of class: Category


////////////////////////////////////////////////////////////////////////////////
// Function: operator<<
// Output operator for Category.
////////////////////////////////////////////////////////////////////////////////
ostream&
operator<<(ostream &os, const Category &);


////////////////////////////////////////////////////////////////////////////////
// Class: CategorySequence
// Provides the interface for a sequence of Category.
////////////////////////////////////////////////////////////////////////////////
class CategorySequence:public vector<Category> {
public:
////////////////////////////////////////////////////////////////////////////////
// Function: CategorySequence
// Constructor.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence():_alive(true) { }

////////////////////////////////////////////////////////////////////////////////
// Function: CategorySequence
// Constructor.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence(const CategorySequence &s):vector<Category>(s),
      _alive(true) { }

////////////////////////////////////////////////////////////////////////////////
// Function: CategorySequence
// Constructor.
////////////////////////////////////////////////////////////////////////////////
  template <class In>
  CategorySequence(In first, In last):vector<Category>(first, last),
      _alive(true) { }

////////////////////////////////////////////////////////////////////////////////
// Function: CategorySequence
// Constructor.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence(const Category &);

////////////////////////////////////////////////////////////////////////////////
// Function: operator+=
// Addition assignment operator.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence&
  operator+=(const Category &);

////////////////////////////////////////////////////////////////////////////////
// Function: operator+=
// Addition assignment operator.
////////////////////////////////////////////////////////////////////////////////
  CategorySequence&
  operator+=(const CategorySequence &);

////////////////////////////////////////////////////////////////////////////////
// Function: print
// Print the CategorySequence on the ostream.
////////////////////////////////////////////////////////////////////////////////
  void
  print(ostream &) const;

////////////////////////////////////////////////////////////////////////////////
// Function: read
// Read the CategorySequence from the istream.
////////////////////////////////////////////////////////////////////////////////
  void
  read(istream &);

////////////////////////////////////////////////////////////////////////////////
// Function: rest
// Return the rest of the sequence (sequence without the front).
////////////////////////////////////////////////////////////////////////////////
  CategorySequence
  rest() const;

protected:
private:
////////////////////////////////////////////////////////////////////////////////
// Variable: _alive
// True if the CategorySequence is still alive, false otherwise.
////////////////////////////////////////////////////////////////////////////////
  bool _alive;
}; // end of class: CategorySequence


////////////////////////////////////////////////////////////////////////////////
// Function: operator<<
// Output operator for CategorySequence.
////////////////////////////////////////////////////////////////////////////////
ostream &
operator<<(ostream &, const CategorySequence &);


////////////////////////////////////////////////////////////////////////////////
// Function: operator>>
// Input operator for CategorySequence.
////////////////////////////////////////////////////////////////////////////////
istream &
operator>>(istream &, CategorySequence &);


////////////////////////////////////////////////////////////////////////////////
// Function: operator+
// Addition operator for CategorySequence and Category.
////////////////////////////////////////////////////////////////////////////////
CategorySequence
operator+(const CategorySequence &, const Category &);

////////////////////////////////////////////////////////////////////////////////
// Function: operator+
// Addition operator for CategorySequence and CategorySequence.
////////////////////////////////////////////////////////////////////////////////
CategorySequence
operator+(const CategorySequence &, const CategorySequence &);

#endif
// end of file: category.h
